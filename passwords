#!/usr/bin/env python
# https://github.com/spjwebster/keychain.py.git
#
# k.create_keychain('MyPasswords', pass)
#
import keychain
import getpass
import subprocess
import sys

keys = keychain.Keychain()	


def add_account(account):
	try:
		username, account = account.split(':')
	except ValueError:
		sys.exit("account must be in the form of user:account")

	password = getpass.getpass('Password:')
	if password != getpass.getpass('Password (again):'):
		sys.exit("Passwords did not match")

	keys.set_generic_password('MyPasswords',
			username, password,'%s:%s' % (username, account))


def update_account(service):
	account = service.split('@')[0]

	credentials = keys.get_generic_password('MyPasswords',
			account, service)
	try:
		old_password = credentials.get('password')
	except AttributeError:
		sys.exit("Failed to access account")		

	password = getpass.getpass('Password:')
	if password != getpass.getpass('Password (again):'):
		sys.exit("Passwords did not match")

	keys.change_generic_password('MyPasswords',
			old_password, account, password)


def get_accounts():
	for account in keys.list_keychain_accounts('MyPasswords'):
		print account.get('service')


def get_credentials(service):
	account = service.split(':')[0]
	credentials = keys.get_generic_password('MyPasswords',
			account, service)

	try:
		p = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE)
		p.stdin.write(credentials.get('password'))
		p.stdin.close()
		p.wait()

	except AttributeError:
		sys.exit("Failed to access credentials")

	print "Username:",credentials.get('account')
	print "Password copied to clipboard"


if __name__ == '__main__':
	import argparse
	parser = argparse.ArgumentParser(
			description='')

	parser.add_argument(
		"-a", 
		"--account", 
		help="Account you wish to add / retrieve")

	group = parser.add_mutually_exclusive_group()
	
	group.add_argument(
		"-n", 
		"--new", 
		help="Create an entry in your OSX keyring")
	
	group.add_argument(
		"-u", 
		"--update",
		action="store_true",		
		help="Update the password for an account in your OSX keyring")
	
	group.add_argument(
		"-l", 
		"--list", 
		action="store_true",
		help="List all saved accounts")

	args = parser.parse_args()

	if(args.list): get_accounts()

	if(args.new):
		add_account(args.new)

	if(args.account):
		if(args.update):
			update_account(args.account)
		else:
			get_credentials(args.account)
	
	if not any(vars(args).values()):
		get_accounts()





